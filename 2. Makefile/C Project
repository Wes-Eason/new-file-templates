# Good starting point for Debug builds of C projects
# Known Problems:
#	- Linking to libs has not been tested
#	- All object files are linked into targets, regardless of relevance

BUILD_TARGETS = $(BIN_DIR)/test

CC = gcc
CFLAGS = -iquote"$(SRC_DIR)" -g3 -std=c99 -Wall

LINKER = gcc
LINKER_FLAGS = 


SRC_DIR = src
OBJ_DIR = obj
BIN_DIR = .
DEP_DIR = dep

SOURCES = $(shell find $(SRC_DIR) -type f -name *.c)
OBJECTS = $(SOURCES:$(SRC_DIR)/%.c=$(OBJ_DIR)/%.o)
DEPENDS = $(SOURCES:$(SRC_DIR)/%.c=$(DEP_DIR)/%.d)

-include $(DEPENDS)

.PHONY: all
all: mkfs
all: build

.PHONY: build
build: mkfs
build: print_head
build: $(OBJECTS)
build: $(BUILD_TARGETS)
build: print_tail

.PHONY: mkfs
mkfs:
	@ [ -d "$(OBJ_DIR)" -o -z "$(OBJ_DIR)" ] || mkdir -p "$(OBJ_DIR)"
	@ [ -d "$(BIN_DIR)" -o -z "$(BIN_DIR)" ] || mkdir -p "$(BIN_DIR)"
	@ [ -d "$(DEP_DIR)" -o -z "$(DEP_DIR)" ] || mkdir -p "$(DEP_DIR)"
# Link
# TODO: targets only depend on relevant objects
$(BUILD_TARGETS): $(BIN_DIR)/%: $(OBJECTS)
	@ echo -e "[ Link ]: $@/";\
	$(LINKER) $(LINKER_FLAGS) -o $@ $(LIBS) $^ 

# Compile
$(OBJECTS): $(OBJ_DIR)/%.o : $(SRC_DIR)/%.c 
	@ echo -e "[ build ]: $@"
	$(CC) $(CFLAGS) -c $< -o $@

# Looks good
.PHONY: print_head
print_head: 
	@echo "################################################"
	@echo "# build started : $$(date) #"
	@echo "################################################"
	
.PHONY: print_tail
print_tail:
	@echo "#################################################"
	@echo "# build complete : $$(date) #"
	@echo "#################################################"	

# cleans up
.PHONY: clean
clean: 
	@for item in "$(BIN_DIR)" "$(OBJ_DIR)" "$(DEP_DIR)"; do \
		[ -d "$$item" ] && \
			[ -z "$$item" -o "$$(cd "$$item"; pwd)" = "$(PWD)" ] || \
				rm -rf "$$item"; \
	done
	@rm  -f $(BUILD_TARGETS)
	


